#!/usr/bin/env python


## Copyright (c) 2008, Georgia Tech Research Corporation
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
##
##     * Redistributions of source code must retain the above
##       copyright notice, this list of conditions and the following
##       disclaimer.
##     * Redistributions in binary form must reproduce the above
##       copyright notice, this list of conditions and the following
##       disclaimer in the documentation and/or other materials
##       provided with the distribution.
##     * Neither the name of the Georgia Tech Research Corporation nor
##       the names of its contributors may be used to endorse or
##       promote products derived from this software without specific
##       prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY GEORGIA TECH RESEARCH CORPORATION ''AS
## IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
## FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GEORGIA
## TECH RESEARCH CORPORATION BE LIABLE FOR ANY DIRECT, INDIRECT,
## INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
## (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
## SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
## STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
## OF THE POSSIBILITY OF SUCH DAMAGE.

## FILE: achpipe
## DESC: Wrapper for achpipe.bin to setup streams

## When it becomes necessary, this wrapper can be used to set up a TCP
## connection and dup it to stdin/stdout before exec'ing achpipe.bin

from optparse import OptionParser
import os
import socket

def parse():
    p = OptionParser()
    p.add_option("-v", "--verbose",
                 action="count", dest="verbose")
    p.add_option("-L", "--help.bin",
                 action="store_true", dest="help_bin")
    p.add_option("-l", "--last",
                 action="store_true", dest="last")
    p.add_option("-p", "--publish", dest="publish_channel")
    p.add_option("-s", "--subscribe", dest="subscribe_channel")
    p.add_option("-z", "--remote-channel", dest="remote_channel")
    p.add_option("-S", "--subscribe-synchronous", dest="sync_channel")
    p.add_option("-R", "--read-headers",
                 action="store_true", dest="read_headers")
    p.add_option("-W", "--write-headers",
                 action="store_true", dest="write_headers")
    p.add_option("-H", "--host", dest="host")
    p.add_option("-P", "--port", dest="port", 
                 type="int", default=8075)
    (options, args) = p.parse_args()
    return options
    
def make_args(opts):
    args = ["achpipe.bin"]
    if opts.help_bin :
        args.append("--help")
    if opts.verbose :
        for i in range(0, opts.verbose):
            args.append("--verbose")
    if opts.last:
        args.append("--last")
    if opts.publish_channel:
        args.append("--publish")
        args.append(opts.publish_channel)
    if opts.subscribe_channel :
        args.append("--subscribe")
        args.append(opts.subscribe_channel)
    if opts.remote_channel :
        args.append("--remote-channel")
        args.append(opts.remote_channel)
    if opts.sync_channel :
        args.append("--subscribe")
        args.append(opts.sync_channel)
        args.append("--synchronous")
    if opts.read_headers:
        args.append("--read-headers")
    if opts.write_headers:
        args.append("--write-headers")

    return args

def setup_streams(opts):
    ## TODO: dup TCP streams
    if opts.host :
        sock = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
        sock.connect( (opts.host, opts.port) )
        fd = sock.fileno()
        os.dup2( fd, 0 )
        os.dup2( fd, 1 )
    return

def main():
    options = parse()
    setup_streams(options)
    args = make_args(options)
    #print args
    os.execvp( "achpipe.bin", args )
    


if __name__ == "__main__":
    main()
